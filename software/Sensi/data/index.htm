<!doctype html>
<html>
<head>
  <title>Sensi</title>
  
  <! -- document styles and scripts go here -->
  <link rel="stylesheet" type="text/css" href="main.css">
  <link rel="icon" type="image/png" sizes="144x144" href="/airquality-144x144.png">
  <link rel="icon" type="image/png" sizes="96x96" href="/airquality.ico">
  <link rel="manifest" href="/manifest.json">
  <meta name="theme-color" content="#00878f">
  <meta content='width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0' name='viewport'>
</head>

<body>
  <header>
    <h1><img src="airquality-48x48.png"> Sensor Server</h1>
  </header>

	<h2>Date and Time</h2>
	  Time <spawn id="Hour">--</spawn>:<spawn id="Minute">--</spawn> <br>
	  Date <spawn id="Month">--</spawn>,<spawn id="Day">--</spawn>,<spawn id="Year">--</spawn> <br>

	<h2>Wi Fi</h2>
	  <spawn id="Hostname">-----</spawn> is at <spawn id="IP">---.---.---.---</spawn>

  <h2>Barometric Pressure</h2>
  BME280      : <spawn id="BME280Pressure">1000mb</spawn> <spawn id="BME280dPaq">normal</spawn> <br>
  BME280 24hrs: <spawn id="BME280PressureAvg">1000mb</spawn><br>
  BME680      : <spawn id="BME680Pressure">1000mb</spawn> <spawn id="BME680dPaq">normal</spawn><br>
  BME680 24hrs: <spawn id="BME680PressureAvg">1000mb</spawn><br>
  
  <h2>Temperature</h2>
  BME280      : <spawn id="BME280Temp">22 &deg;C</spawn><br>
  BME680      : <spawn id="BME680Temp">22 &deg;C</spawn><br>
  MLX ambient : <spawn id="MLXAmbient">22 &deg;C</spawn><br>
  MLX object  : <spawn id="MLXObject">22 &deg;C</spawn><br>
  SCD30       : <spawn id="SCD30Temp">22 &deg;C</spawn><br>
  
  <h2>Humidity</h2>
  BME280      : <spawn id="BME280rHum">45%</spawn> <spawn id="BME280aHum">45g/m^3</spawn> <br>
  BME680      : <spawn id="BME680rHum">45%</spawn> <spawn id="BME680aHum">45g/m^3</spawn><br>
  SCD30       : <spawn id="SCD30rHum">45%</spawn> <spawn id="SCD30aHum">45g/m^3</spawn><br>
  
  <h2>CO2</h2>
  SCD30 CO2   : <spawn id="SCD30CO2">400ppm</spawn><br>
  CCS811 eCO2 : <spawn id="CCS811CO2">400ppm</spawn><br>
  SGP30 eCO2  : <spawn id="SGP30CO2">400ppm</spawn><br>
  
  <h2>Gas</h2>
  CCS811 tVOC : <spawn id="CCS811tVOC">200pbb</spawn><br>
  SGP30 tVOC  : <spawn id="SGP30tVOC">200pbb</spawn><br>
  BME680 Gas Resistance : <spawn id="BME680Resistance">3000Ohm</spawn><br>
  
  <h2>Particulate Matter</h2>
  Particulate Matter 1.0 : <spawn id="PM1"> 1.0 µg/m3 </spawn>, <spawn id="NumPM1"> 0.0 #/cm3</spawn><br>
  Particulate Matter 2.5 : <spawn id="PM2"> 1.0 µg/m3 </spawn>, <spawn id="NumPM2"> 0.0#/cm3 </spawn> <spawn id="PM2aq">normal</spawn><br>
  Particulate Matter 4.0 : <spawn id="PM4"> 1.0 µg/m3 </spawn>, <spawn id="NumPM4"> 0.0#/cm3 </spawn><br>
  Particulate Matter 10  : <spawn id="PM10"> 1.0 µg/m3 </spawn>, <spawn id="NumPM10P"> 0.0#/cm3 </spawn> <spawn id="PM10aq">normal</spawn><br>
  Average Size           : <spawn id="PartSize"> 1.0µm </spawn><br>
      
  <br><br><a href="https://github.com/uutzinger/airquality">Urs Utzinger</a>

  <script>

  getTime();
  getDate();
  getHostname();
  getIP();
  setInterval(getHostname,60000);
  setInterval(getIP,      60000);
  setInterval(getDate,    60000);
  setInterval(getTime,    60000);
  setInterval(getDataBME280,   1000);
  setInterval(getDataBME680,   5000);
  setInterval(getDataCCS811,  10000);
  // setInterval(getDataMAX,     1000);
  setInterval(getDataMLX,      1000);
  setInterval(getDataSCD30,    4000);
  setInterval(getDataSGP30,    1000);
  setInterval(getDataSPS30,    5000);

  <!-- {"time":{"hour":7,"minute":24,"second":"54"}} -->
  function getTime() {
    var xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function() {
      if (this.readyState == 4 && this.status == 200) {
        var txt = this.responseText;
        var obj = JSON.parse(txt); 
        document.getElementById('Hour').innerHTML   = String(obj.time.hour).padStart(2,'0');
        document.getElementById('Minute').innerHTML = String(obj.time.minute).padStart(2,'0');
      } 
    };
    xhttp.open("GET", "time", true);
    xhttp.send();
  }

  <!-- {"date":{"day":1,"month":1,"year":"1970"}} -->
  function getDate() {
    var xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function() {
      if (this.readyState == 4 && this.status == 200) {
        var txt = this.responseText;
        var obj = JSON.parse(txt); 
        document.getElementById('Month').innerHTML = obj.date.month;
        document.getElementById('Day').innerHTML   = obj.date.day;
        document.getElementById('Year').innerHTML  = obj.date.year;
      }  
    };
    xhttp.open("GET", "date", true);
    xhttp.send();
  }

  <!-- {"hostname":"esp8266-e3fce0"} -->
  function getHostname() {
    var xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function() {
      if (this.readyState == 4 && this.status == 200) {
        var txt = this.responseText;
        var obj = JSON.parse(txt); 
        document.getElementById('Hostname').innerHTML = obj.hostname;
      }
    };
    xhttp.open("GET", "hostname", true);
    xhttp.send();
  }

  <!-- {"ip":"192.168.16.217"} -->
  function getIP() {
    var xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function() {
      if (this.readyState == 4 && this.status == 200) {
        var txt = this.responseText;
        var obj = JSON.parse(txt); 
        document.getElementById('IP').innerHTML = obj.ip;
      }
    };
    xhttp.open("GET", "ip", true);
    xhttp.send();
  }

  function getDataBME280() {
    var xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function() {
      if (this.readyState == 4 && this.status == 200) {
        var txt = this.responseText;
        var obj = JSON.parse(txt); 
        document.getElementById("BME280Pressure").innerHTML = obj.bme280.p + "mbar";
        document.getElementById("BME280PressureAvg").innerHTML = obj.bme280.pavg + "mbar";
        document.getElementById("BME280rHum").innerHTML = obj.bme280.rH + "%";
        document.getElementById("BME280aHum").innerHTML = obj.bme280.aH + "g";
        document.getElementById("BME280Temp").innerHTML = obj.bme280.T + "&deg;C";
        document.getElementById("BME280dpaq").innerHTML = obj.bme280.dp_airquality;
        document.getElementById("BME280Haq").innerHTML = obj.bme280.rH_airquality;
      }  
    };
    xhttp.open("GET", "bme280", true);
    xhttp.send();
  }

  function getDataBME680() {
    var xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function() {
      if (this.readyState == 4 && this.status == 200) {
        var txt = this.responseText;
        var obj = JSON.parse(txt); 
        document.getElementById("BME680Pressure").innerHTML = obj.bme680.p + "mbar";
        document.getElementById("BME680PressureAvg").innerHTML= obj.bme680.pavg + "mbar";
        document.getElementById("BME680rHum").innerHTML = obj.bme680.rH + "%";
        document.getElementById("BME680aHum").innerHTML = obj.bme680.aH + "g/m3";
        document.getElementById("BME680Temp").innerHTML = obj.bme680.T + "&deg;C";
        document.getElementById("BME680Resistance").innerHTML = obj.bme680.resistance + "Ohm";
        document.getElementById("BME680dpaq").innerHTML = obj.bme680.dp_airquality;
        document.getElementById("BME680Haq").innerHTML = obj.bme680.rH_airquality;
        document.getElementById("BME680Raq").innerHTML = obj.bme680.resistance_airquality;
      }
    };
    xhttp.open("GET", "bme680", true);
    xhttp.send();
  }

  function getDataCCS811() {
    var xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function() {
      if (this.readyState == 4 && this.status == 200) {
        var txt = this.responseText;
        var obj = JSON.parse(txt);
        document.getElementById("CCS811CO2").innerHTML = obj.ccs811.eCO2 + "ppm";
        document.getElementById("CCS811tVOC").innerHTML = obj.ccs811.tVOC + "ppb";
        document.getElementById("CCS811eCO2aq").innerHTML = obj.ccs811.eCO2_airquality;
        document.getElementById("CCS811tVOCaq").innerHTML = obj.ccs811.tVOC_airquality;
      }
    };
    xhttp.open("GET", "ccs811", true);
    xhttp.send();
  }

  function getDataMAX() {
    var xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function() {
      if (this.readyState == 4 && this.status == 200) {
        var txt = this.responseText;
        var obj = JSON.parse(txt); 
        document.getElementById("HR").innerHTML = obj.max.HR + "bpm";
        document.getElementById("O2Sat").innerHTML = obj.max.O2Sat + "%";
      }  
    };
    xhttp.open("GET", "max", true);
    xhttp.send();
  }

    function getDataMLX() {
      var xhttp = new XMLHttpRequest();
      xhttp.onreadystatechange = function() {
        if (this.readyState == 4 && this.status == 200) {
          var txt = this.responseText;
          var obj = JSON.parse(txt);
          document.getElementById("MLXObject").innerHTML = obj.mlx.To + "&deg;C";
          document.getElementById("MLXAmbient").innerHTML = obj.mlx.Ta + "&deg;C";
          document.getElementById("MLXfever").innerHTML = obj.mlx.fever;
        }  
      };
      xhttp.open("GET", "mlx", true);
      xhttp.send();
    }

  function getDataSCD30() {
    var xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function() {
      if (this.readyState == 4 && this.status == 200) {
        var txt = this.responseText;
        var obj = JSON.parse(txt);
        document.getElementById("SCD30CO2").innerHTML = obj.scd30.CO2 + "ppm";
        document.getElementById("SCD30rHum").innerHTML = obj.scd30.rH + "%";
        document.getElementById("SCD30aHum").innerHTML = obj.scd30.aH + "g/m3";
        document.getElementById("SCD30Temp").innerHTML = obj.scd30.T + "&deg;C";
        document.getElementById("SCD30CO2aq").innerHTML = obj.scd30.CO2_airquality;
        document.getElementById("SCD30rHaq").innerHTML = obj.scd30.rh_airquality;
      }  
    };
    xhttp.open("GET", "scd30", true);
    xhttp.send();
  }

  function getDataSGP30() {
    var xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function() {
      if (this.readyState == 4 && this.status == 200) {
        var txt = this.responseText;
        var obj = JSON.parse(txt); 
        document.getElementById("SGP30CO2").innerHTML = obj.sgp30.eCO2 + "ppm";
        document.getElementById("SGP30tVOC").innerHTML = obj.sgp30.tVOC + "ppb";
        document.getElementById("SGP30eCO2aq").innerHTML = obj.sgp30.eCO2_airquality;
        document.getElementById("SGP30tVOCaq").innerHTML = obj.sgp30.tVOC_airquality;
      }
    };
    xhttp.open("GET", "sgp30", true);
    xhttp.send();
  }

  function getDataSPS30() {
    var xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function() {
      if (this.readyState == 4 && this.status == 200) {
        var txt = this.responseText;
        var obj = JSON.parse(txt);
        document.getElementById("PM1").innerHTML = obj.sps30.PM1 + "&micro;g/m3";
        document.getElementById("PM2").innerHTML = obj.sps30.PM2 + "&micro;g/m3";
        document.getElementById("PM4").innerHTML = obj.sps30.PM4 + "&micro;g/m3";
        document.getElementById("PM10").innerHTML = obj.sps30.PM10 + "&micro;g/m3";
        document.getElementById("NumPM1").innerHTML = obj.sps30.nPM0 + "#/cm3";
        document.getElementById("NumPM2").innerHTML = obj.sps30.nPM2 + "#/cm";
        document.getElementById("NumPM4").innerHTML = obj.sps30.nPM4 + "#/cm";
        document.getElementById("NumPM10").innerHTML = obj.sps30.nPM10 + "#/cm";
        document.getElementById("PartSize").innerHTML = obj.sps30.PartSize + "&microm";
        document.getElementById("PM2aq").innerHTML = obj.sps30.PM2_airquality;
        document.getElementById("PM10aq").innerHTML = obj.sps30.PM10_airquality;
      }
    };
    xhttp.open("GET", "sps30", true);
    xhttp.send();
  }

  </script>

</body>
</html>
