<!doctype html>
<html>
<head>
  <title>Sensi</title>
  
  <! -- document styles and scripts go here -->
  <link rel="stylesheet" type="text/css" href="main.css">
  <link rel="icon" type="image/png" sizes="144x144" href="/airquality-144x144.png">
  <link rel="icon" type="image/png" sizes="96x96" href="/airquality.ico">
  <link rel="manifest" href="/manifest.json">
  <meta name="theme-color" content="#00878f">
  <meta content='width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0' name='viewport'>
</head>

<body>
  <header>
    <h1><img src="airquality-48x48.png"> Sensor Server</h1>
  </header>

	<h2>Date and Time</h2>
  <table>
    <tr>
	    <td>Time</td> <td><spawn id="Hour">--</spawn>:<spawn id="Minute">--</spawn> </td>
    </tr>
    <tr>
        <td>Date</td> <td><spawn id="Month">--</spawn>/<spawn id="Day">--</spawn>/<spawn id="Year">--</spawn> </td>
    </tr>
  </table>
  <br>

	<h2>Wi-Fi</h2>
  <table>
    <tr>
  	  <td><spawn id="Hostname">-----</spawn></td> <td><spawn id="IP">---.---.---.---</spawn> </td>
    </tr>
  </table>
  <br>

  <h2>Barometric Pressure</h2>
  <table>
    <tr>
      <td>BME280 </td> <td><spawn id="BME280Pressure">0mb</spawn> </td> <td><spawn id="BME280dPaq"></spawn> </td>
    </tr>
    <tr>
      <td>BME280 24hrs </td> <td><spawn id="BME280PressureAvg">0mb</spawn> </td>
    </tr>
    <tr>
      <td>BME68x </td> <td><spawn id="BME68xPressure">0mb</spawn> </td> <td><spawn id="BME68xdPaq"></spawn> </td>
    </tr>
    <tr>
      <td>BME68x 24hrs </td> <td><spawn id="BME68xPressureAvg">0mb</spawn> </td>
    </tr>
  </table>
  <br>

  <h2>Temperature</h2>
  <table>
    <tr>
      <td>BME280 </td> <td><spawn id="BME280Temp">-999 &deg;C</spawn> </td> <td><spawn id="BME280Tq"></spawn> </td>
    </tr>
    <tr>
      <td>BME68x </td> <td><spawn id="BME68xTemp">-999 &deg;C</spawn> </td> <td><spawn id="BME68xTq"></spawn> </td>
    </tr>
    <tr>
      <td>MLX ambient </td> <td><spawn id="MLXAmbient">-999 &deg;C</spawn> </td> <td><spawn id="MLXaTq"></spawn> </td>
    </tr>
    <tr>
      <td>MLX object </td> <td><spawn id="MLXObject">-999 &deg;C</spawn> </td> <td><spawn id="MLXfever"></spawn> </td>
    </tr>
    <tr>
      <td>SCD30 </td> <td><spawn id="SCD30Temp">-999 &deg;C</spawn> </td> <td><spawn id="SCD30Tq"></spawn> </td>
    </tr>
  </table>
  <br>
  
  <h2>Humidity</h2>
  <table>
    <tr>
      <td>BME280 </td> <td><spawn id="BME280rHum">0%</spawn>, <spawn id="BME280aHum">45g/m<sup>3</sup></spawn> </td> <td><spawn id="BME280Haq"></spawn> </td>
    </tr>
    <tr>
      <td>BME68x </td> <td><spawn id="BME68xrHum">0%</spawn>, <spawn id="BME68xaHum">45g/m<sup>3</sup></spawn> </td> <td><spawn id="BME68xHaq"></spawn> </td>
    </tr>
    <tr>
      <td>SCD30 </td> <td><spawn id="SCD30rHum">0%</spawn>, <spawn id="SCD30aHum">45g/m<sup>3</sup></spawn> </td> <td><spawn id="SCD30rHaq"></spawn> </td>
    </tr>
  </table>
  <br>

  <h2>CO2</h2>
  <table>
    <tr>
      <td>SCD30 CO2 </td> <td><spawn id="SCD30CO2">0ppm</spawn> </td> <td><spawn id="SCD30CO2aq"></spawn> </td>
    </tr>
    <tr>
      <td>CCS811 eCO2 </td> <td><spawn id="CCS811CO2">0ppm</spawn> </td> <td><spawn id="CCS811eCO2aq"></spawn> </td>
    </tr>
    <tr>
      <td>SGP30 eCO2 </td> <td><spawn id="SGP30CO2">0ppm</spawn> </td> <td><spawn id="SGP30eCO2aq"></spawn> </td>
    </tr>
  </table>
  <br>

  <h2>Gas</h2>
  <table>
    <tr>
      <td>CCS811 tVOC </td> <td><spawn id="CCS811tVOC">0pbb</spawn> </td> <td><spawn id="CCS811tVOCaq"></spawn> </td>
    </tr>
    <tr>
      <td>SGP30 tVOC </td> <td><spawn id="SGP30tVOC">0pbb</spawn> </td> <td><spawn id="SGP30tVOCaq"></spawn> </td>
    </tr>
    <tr>
      <td>BME68x Gas Resistance </td> <td><spawn id="BME68xResistance">0Ohm</spawn> </td> <td><spawn id="BME68xRaq"></spawn> </td>
    </tr>
  </table>
  <br>

  <h2>Particulate Matter</h2>
  <table>
    <tr>
      <td>Particulate Matter 1.0 </td> <td><spawn id="PM1"> -1.0 &micro;g/m<sup>3</sup></spawn>, <spawn id="NumPM1"></sup></spawn> </td>
    </tr>
    <tr>
      <td>Particulate Matter 2.5 </td> <td><spawn id="PM2"> -1.0 &micro;g/m<sup>3</sup></spawn>, <spawn id="NumPM2"></spawn> </td> <td><spawn id="PM2aq"></spawn></td>
    </tr>
    <tr>
      <td>Particulate Matter 4.0 </td> <td><spawn id="PM4"> -1.0 &micro;g/m<sup>3</sup></spawn>, <spawn id="NumPM4"></spawn> </td>
    </tr>
    <tr>
      <td>Particulate Matter 10 </td> <td><spawn id="PM10"> -1.0 &micro;g/m<sup>3</sup></spawn>, <spawn id="NumPM10"></spawn> </td> <td><spawn id="PM10aq"></spawn> </td>
    </tr>
    <tr>
      <td>Average Size </td> <td><spawn id="PartSize"></spawn> </td>
  </tr>
  </table>
  <br>

  <h2>System</h2>
  <table>
    <tr>
      <td>Free Heap </td> <td><spawn id="FreeHeap">--</spawn></td>
    </tr>
    <tr>
      <td>Heap Fragmentation </td> <td><spawn id="HeapFrag">--</spawn></td>
    </tr>
    <tr>
      <td>Max Free Block Size </td> <td><spawn id="MaxFreeBlock">--</spawn></td>
    </tr>
    <tr>
      <td>Max Loop Time</td> <td><spawn id="MaxLoopTime">--</spawn></td>
  </tr>
  </table>

  <br><a href="https://github.com/uutzinger/airquality">Urs Utzinger</a>

  <script>

  getTime();
  getDate();
  getHostname();
  getIP();
  getSystem();
  setInterval(getHostname,    60000);
  setInterval(getIP,          60000);
  setInterval(getDate,        60000);
  setInterval(getTime,        60000);
  setInterval(getSystem,       5000);
  setInterval(getDataBME280,   1000);
  setInterval(getDataBME68x,   5000);
  setInterval(getDataCCS811,  10000);
  // setInterval(getDataMAX,     1000);
  setInterval(getDataMLX,      1000);
  setInterval(getDataSCD30,    4000);
  setInterval(getDataSGP30,    1000);
  setInterval(getDataSPS30,    5000);

  <!-- { "time": { "hour": 10, "minute": 40, "second": 4, "microsecond": 298377}} -->
  function getTime() {
    var xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function() {
      if (this.readyState == 4 && this.status == 200) {
        var txt = this.responseText;
        var obj = JSON.parse(txt); 
        document.getElementById('Hour').innerHTML   = String(obj.time.hour).padStart(2,'0');
        document.getElementById('Minute').innerHTML = String(obj.time.minute).padStart(2,'0');
      } 
    };
    xhttp.open("GET", "time", true);
    xhttp.send();
  }

  <!-- { "date": { "day": 27, "month": 6, "year": 2022}} -->
  function getDate() {
    var xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function() {
      if (this.readyState == 4 && this.status == 200) {
        var txt = this.responseText;
        var obj = JSON.parse(txt); 
        document.getElementById('Month').innerHTML = obj.date.month;
        document.getElementById('Day').innerHTML   = obj.date.day;
        document.getElementById('Year').innerHTML  = obj.date.year;
      }  
    };
    xhttp.open("GET", "date", true);
    xhttp.send();
  }

  <!-- { "hostname": "esp8266-e3fce0"} -->
  function getHostname() {
    var xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function() {
      if (this.readyState == 4 && this.status == 200) {
        var txt = this.responseText;
        var obj = JSON.parse(txt); 
        document.getElementById('Hostname').innerHTML = obj.hostname;
      }
    };
    xhttp.open("GET", "hostname", true);
    xhttp.send();
  }

  <!-- { "ip": "192.168.16.217"} -->
  function getIP() {
    var xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function() {
      if (this.readyState == 4 && this.status == 200) {
        var txt = this.responseText;
        var obj = JSON.parse(txt); 
        document.getElementById('IP').innerHTML = obj.ip;
      }
    };
    xhttp.open("GET", "ip", true);
    xhttp.send();
  }

  <!-- { "system": { "freeheap": 20000, "heapfragmentation": 3, "maxfreeblock": 20000, "maxlooptime": 82}} -->
  function getSystem() {
    var xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function() {
      if (this.readyState == 4 && this.status == 200) {
        var txt = this.responseText;
        var obj = JSON.parse(txt); 
        document.getElementById('FreeHeap').innerHTML = obj.system.freeheap + "bytes";
        document.getElementById('HeapFrag').innerHTML = obj.system.heapfragmentation + "%";
        document.getElementById('MaxFreeBlock').innerHTML = obj.system.maxfreeblock + "bytes";
        document.getElementById('MaxLoopTime').innerHTML = obj.system.maxlooptime +"ms";
      }
    };
    xhttp.open("GET", "system", true);
    xhttp.send();
  }

  function getDataBME280() {
    var xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function() {
      if (this.readyState == 4 && this.status == 200) {
        var txt = this.responseText;
        var obj = JSON.parse(txt); 
        document.getElementById("BME280Pressure").innerHTML = obj.bme280.p + "mbar";
        document.getElementById("BME280PressureAvg").innerHTML = obj.bme280.pavg + "mbar";
        document.getElementById("BME280rHum").innerHTML = obj.bme280.rH + "%";
        document.getElementById("BME280aHum").innerHTML = obj.bme280.aH + "g/m<sup>3</sup>";
        document.getElementById("BME280Temp").innerHTML = obj.bme280.T + "&deg;C";
        document.getElementById("BME280Tq").innerHTML = obj.bme280.T_airquality;
        document.getElementById("BME280dPaq").innerHTML = obj.bme280.dp_airquality;
        document.getElementById("BME280Haq").innerHTML = obj.bme280.rH_airquality;
      }  
    };
    xhttp.open("GET", "bme280", true);
    xhttp.send();
  }

  function getDataBME68x() {
    var xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function() {
      if (this.readyState == 4 && this.status == 200) {
        var txt = this.responseText;
        var obj = JSON.parse(txt); 
        document.getElementById("BME68xPressure").innerHTML = obj.bme68x.p + "mbar";
        document.getElementById("BME68xPressureAvg").innerHTML= obj.bme68x.pavg + "mbar";
        document.getElementById("BME68xrHum").innerHTML = obj.bme68x.rH + "%";
        document.getElementById("BME68xaHum").innerHTML = obj.bme68x.aH + "g/m<sup>3</sup>";
        document.getElementById("BME68xTemp").innerHTML = obj.bme68x.T + "&deg;C";
        document.getElementById("BME68xTq").innerHTML = obj.bme68x.T_airquality;
        document.getElementById("BME68xResistance").innerHTML = obj.bme68x.resistance + "Ohm";
        document.getElementById("BME68xdPaq").innerHTML = obj.bme68x.dp_airquality;
        document.getElementById("BME68xHaq").innerHTML = obj.bme68x.rH_airquality;
        document.getElementById("BME68xRaq").innerHTML = obj.bme68x.resistance_airquality;
      }
    };
    xhttp.open("GET", "bme68x", true);
    xhttp.send();
  }

  function getDataCCS811() {
    var xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function() {
      if (this.readyState == 4 && this.status == 200) {
        var txt = this.responseText;
        var obj = JSON.parse(txt);
        document.getElementById("CCS811CO2").innerHTML = obj.ccs811.eCO2 + "ppm";
        document.getElementById("CCS811tVOC").innerHTML = obj.ccs811.tVOC + "ppb";
        document.getElementById("CCS811eCO2aq").innerHTML = obj.ccs811.eCO2_airquality;
        document.getElementById("CCS811tVOCaq").innerHTML = obj.ccs811.tVOC_airquality;
      }
    };
    xhttp.open("GET", "ccs811", true);
    xhttp.send();
  }

  function getDataMAX() {
    var xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function() {
      if (this.readyState == 4 && this.status == 200) {
        var txt = this.responseText;
        var obj = JSON.parse(txt); 
        document.getElementById("HR").innerHTML = obj.max.HR + "bpm";
        document.getElementById("O2Sat").innerHTML = obj.max.O2Sat + "%";
      }  
    };
    xhttp.open("GET", "max", true);
    xhttp.send();
  }

    function getDataMLX() {
      var xhttp = new XMLHttpRequest();
      xhttp.onreadystatechange = function() {
        if (this.readyState == 4 && this.status == 200) {
          var txt = this.responseText;
          var obj = JSON.parse(txt);
          document.getElementById("MLXObject").innerHTML = obj.mlx.To + "&deg;C";
          document.getElementById("MLXAmbient").innerHTML = obj.mlx.Ta + "&deg;C";
          document.getElementById("MLXaTq").innerHTML = obj.mlx.T_airquality;
          document.getElementById("MLXfever").innerHTML = obj.mlx.fever;
        }  
      };
      xhttp.open("GET", "mlx", true);
      xhttp.send();
    }

  function getDataSCD30() {
    var xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function() {
      if (this.readyState == 4 && this.status == 200) {
        var txt = this.responseText;
        var obj = JSON.parse(txt);
        document.getElementById("SCD30CO2").innerHTML = obj.scd30.CO2 + "ppm";
        document.getElementById("SCD30rHum").innerHTML = obj.scd30.rH + "%";
        document.getElementById("SCD30aHum").innerHTML = obj.scd30.aH + "g/m<sup>3</sup>";
        document.getElementById("SCD30Temp").innerHTML = obj.scd30.T + "&deg;C";
        document.getElementById("SCD30Tq").innerHTML = obj.scd30.T_airquality;
        document.getElementById("SCD30CO2aq").innerHTML = obj.scd30.CO2_airquality;
        document.getElementById("SCD30rHaq").innerHTML = obj.scd30.rH_airquality;
      }  
    };
    xhttp.open("GET", "scd30", true);
    xhttp.send();
  }

  function getDataSGP30() {
    var xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function() {
      if (this.readyState == 4 && this.status == 200) {
        var txt = this.responseText;
        var obj = JSON.parse(txt); 
        document.getElementById("SGP30CO2").innerHTML = obj.sgp30.eCO2 + "ppm";
        document.getElementById("SGP30tVOC").innerHTML = obj.sgp30.tVOC + "ppb";
        document.getElementById("SGP30eCO2aq").innerHTML = obj.sgp30.eCO2_airquality;
        document.getElementById("SGP30tVOCaq").innerHTML = obj.sgp30.tVOC_airquality;
      }
    };
    xhttp.open("GET", "sgp30", true);
    xhttp.send();
  }

  function getDataSPS30() {
    var xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function() {
      if (this.readyState == 4 && this.status == 200) {
        var txt = this.responseText;
        var obj = JSON.parse(txt);
        document.getElementById("PM1").innerHTML = obj.sps30.PM1 + "&micro;g/m<sup>3</sup>";
        document.getElementById("PM2").innerHTML = obj.sps30.PM2 + "&micro;g/m<sup>3</sup>";
        document.getElementById("PM4").innerHTML = obj.sps30.PM4 + "&micro;g/m<sup>3</sup>";
        document.getElementById("PM10").innerHTML = obj.sps30.PM10 + "&micro;g/m<sup>3</sup>";
        document.getElementById("NumPM1").innerHTML = obj.sps30.nPM0 + "#/cm<sup>3</sup>";
        document.getElementById("NumPM2").innerHTML = obj.sps30.nPM2 + "#/cm<sup>3</sup>";
        document.getElementById("NumPM4").innerHTML = obj.sps30.nPM4 + "#/cm<sup>3</sup>";
        document.getElementById("NumPM10").innerHTML = obj.sps30.nPM10 + "#/cm<sup>3</sup>";
        document.getElementById("PartSize").innerHTML = obj.sps30.PartSize + "&micro;m";
        document.getElementById("PM2aq").innerHTML = obj.sps30.PM2_airquality;
        document.getElementById("PM10aq").innerHTML = obj.sps30.PM10_airquality;
      }
    };
    xhttp.open("GET", "sps30", true);
    xhttp.send();
  }

  </script>

</body>
</html>
