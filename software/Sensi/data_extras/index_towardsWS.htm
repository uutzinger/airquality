<!doctype html>
<html>
<head>
  <title>Sensor System</title>
  <! -- document styles and scripts go here -->
  <link rel="stylesheet" type="text/css" href="main.css">
  <link rel="icon" type="image/png" sizes="144x144" href="/airquality-144x144.png">
  <link rel="icon" type="image/png" sizes="96x96" href="/airquality.ico">
  <link rel="manifest" href="/manifest.json">
  <meta name="theme-color" content="#00878f">
  <meta content='width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0' name='viewport'>
</head>

<body>

  <header>
    <h1><img src="airquality-48x48.png"> Sensor Server</h1>
  </header>

  <h2>Date and Time</h2>
    Time <spawn id="Hour">--</spawn>:<spawn id="Minute">--</spawn>:<spawn id="Second">--</spawn> <br>
    Date <spawn id="Month">--</spawn> <spawn id="Day">--</spawn> <spawn id="Year">--</spawn> <br>

  <h2>Wi Fi</h2>
    <spawn id="Hostname">-----</spawn> is at <spawn id="IP">---.---.---.---</spawn>

  <h2>Barometric Pressure</h2>
    BME280      : <spawn id="BME280Pressure">1000mb</spawn> <spawn id="BME280dPaq">normal</spawn> <br>
    BME280 24hrs: <spawn id="BME280PressureAvg">1000mb</spawn><br>
    BME680      : <spawn id="BME680Pressure">1000mb</spawn> <spawn id="BME680dPaq">normal</spawn><br>
    BME680 24hrs: <spawn id="BME680PressureAvg">1000mb</spawn><br>
    
  <h2>Temperature</h2>
    BME280      : <spawn id="BME280Temp">22 &deg;C</spawn><br>
    BME680      : <spawn id="BME680Temp">22 &deg;C</spawn><br>
    MLX ambient : <spawn id="MLXAmbient">22 &deg;C</spawn><br>
    MLX object  : <spawn id="MLXObject">22 &deg;C</spawn><br>
    SCD30       : <spawn id="SCD30Temp">22 &deg;C</spawn><br>
    
  <h2>Humidity</h2>
    BME280      : <spawn id="BME280rHum">45%</spawn> <spawn id="BME280aHum">45g/m^3</spawn> <br>
    BME680      : <spawn id="BME680rHum">45%</spawn> <spawn id="BME680aHum">45g/m^3</spawn><br>
    SCD30       : <spawn id="SCD30rHum">45%</spawn> <spawn id="SCD30aHum">45g/m^3</spawn><br>
    
  <h2>CO2</h2>
    SCD30 CO2   : <spawn id="SCD30CO2">400ppm</spawn><br>
    CCS811 eCO2 : <spawn id="CCS811CO2">400ppm</spawn><br>
    SGP30 eCO2  : <spawn id="SGP30CO2">400ppm</spawn><br>
    
  <h2>Gas</h2>
    CCS811 tVOC : <spawn id="CCS811tVOC">200pbb</spawn><br>
    SGP30 tVOC  : <spawn id="SGP30tVOC">200pbb</spawn><br>
    BME680 Gas Resistance : <spawn id="BME680Resistance">3000Ohm</spawn><br>
    
  <h2>Particulate Matter</h2>
    Particulate Matter 1.0 : <span id="PM1"> 1 µg/m3 </span>, <span id="NumPM1"> 0 #/cm3</span><br>
    Particulate Matter 2.5 : <span id="PM2"> 1 µg/m3 </span>, <span id="NumPM2"> 0#/cm3 </span> <span id="PM2aq">normal</span><br>
    Particulate Matter 4.0 : <span id="PM4"> 1 µg/m3 </span>, <span id="NumPM4"> 0#/cm3 </span><br>
    Particulate Matter 10  : <span id="PM10"> 1 µg/m3 </span>, <span id="NumPM10P"> 0#/cm3 </span> <span id="PM10aq">normal</span><br>
    Average Size           : <span id="PartSize"> 1µm <\spawn><br>
    
  <br><br><a href="https://github.com/uutzinger">Urs Utzinger</a>

  <script language=\"javascript\" type=\"text/javascript\">

  var connection = new WebSocket('ws://'+location.hostname+':81/', ['arduino']);

  connection.onMessage = function (event) {
    alert("I got data: " + event.data);
    console.log('Server: ', event.data);
	  var msg = JSON.parse(event.data);
	
    if (msg.hasOwnProperty('time')) {
      document.getElementById('Hour').innerHTML   = String(msg.time.hour).padStart(2,'0');
      document.getElementById('Minute').innerHTML = String(msg.time.minute).padStart(2,'0');
      document.getElementById('Second').innerHTML = String(msg.time.second).padStart(2,'0');
    }

    else if (msg.hasOwnProperty('date')) {
      document.getElementById('Month').innerHTML = msg.date.month;
      document.getElementById('Day').innerHTML   = msg.date.day;
      document.getElementById('Year').innerHTML  = msg.date.year;
    }

    else if (msg.hasOwnProperty('hostname')) {
      document.getElementById('Hostname').innerHTML = msg.hostname;
    }

    else if (msg.hasOwnProperty('ip')) {
      document.getElementById('IP').innerHTML = msg.ip;
    }

    else if (msg.hasOwnProperty('bme280')) {
      document.getElementById("BME280Pressure").innerHTML    = msg.bme280.p + "mbar";
      document.getElementById("BME280PressureAvg").innerHTML = msg.bme280.pavg + "mbar";
      document.getElementById("BME280rHum").innerHTML        = msg.bme280.rH + "%";
      document.getElementById("BME280aHum").innerHTML        = msg.bme280.aH + "g";
      document.getElementById("BME280Temp").innerHTML        = msg.bme280.T + "&deg;C";
      document.getElementById("BME280dpaq").innerHTML        = msg.bme280.dp_airquality;
      document.getElementById("BME280Haq").innerHTML         = msg.bme280.rH_airquality;    }

    else if (msg.hasOwnProperty('bme680')) {
      document.getElementById("BME680Pressure").innerHTML    = msg.bme680.p + "mbar";
      document.getElementById("BME680PressureAvg").innerHTML = msg.bme680.pavg + "mbar";
      document.getElementById("BME680rHum").innerHTML        = msg.bme680.rH + "%";
      document.getElementById("BME680aHum").innerHTML        = msg.bme680.aH + "g/m3";
      document.getElementById("BME680Temp").innerHTML        = msg.bme680.T + "&deg;C";
      document.getElementById("BME680Resistance").innerHTML  = msg.bme680.resistance + "Ohm";
      document.getElementById("BME680dpaq").innerHTML        = msg.bme680.dp_airquality;
      document.getElementById("BME680Haq").innerHTML         = msg.bme680.rH_airquality;
      document.getElementById("BME680Raq").innerHTML         = msg.bme680.resistance_airquality;
    }

    else if (msg.hasOwnProperty('ccs811')) {
      document.getElementById("CCS811CO2").innerHTML    = msg.ccs811.eCO2 + "ppm";
      document.getElementById("CCS811tVOC").innerHTML   = msg.ccs811.tVOC + "ppb";
      document.getElementById("CCS811eCO2aq").innerHTML = msg.ccs811.eCO2_airquality;
      document.getElementById("CCS811tVOCaq").innerHTML = msg.ccs811.tVOC_airquality;
    }

    else if (msg.hasOwnProperty('mlx')) {
      document.getElementById("MLXObject").innerHTML  = msg.mlx.To + "&deg;C";
      document.getElementById("MLXAmbient").innerHTML = msg.mlx.Ta + "&deg;C";
      document.getElementById("MLXfever").innerHTML   = msg.mlx.fever;
    }

    else if (msg.hasOwnProperty('scd30')) {
      document.getElementById("SCD30CO2").innerHTML   = msg.scd30.CO2 + "ppm";
      document.getElementById("SCD30rHum").innerHTML  = msg.scd30.rH + "%";
      document.getElementById("SCD30aHum").innerHTML  = msg.scd30.aH + "g/m3";
      document.getElementById("SCD30Temp").innerHTML  = msg.scd30.T + "&deg;C";
      document.getElementById("SCD30CO2aq").innerHTML = msg.scd30.CO2_airquality;
      document.getElementById("SCD30rHaq").innerHTML  = msg.scd30.rh_airquality;
  }

    else if (msg.hasOwnProperty('sgp30')) {
      document.getElementById("SGP30CO2").innerHTML    = msg.sgp30.eCO2 + "ppm";
      document.getElementById("SGP30tVOC").innerHTML   = msg.sgp30.tVOC + "ppb";
      document.getElementById("SGP30eCO2aq").innerHTML = msg.sgp30.eCO2_airquality;
      document.getElementById("SGP30tVOCaq").innerHTML = msg.sgp30.tVOC_airquality;
  }

    else if (msg.hasOwnProperty('sps30')) {
      document.getElementById("PM1").innerHTML        = msg.sps30.PM1 + "&micro;g/m3";
      document.getElementById("PM2").innerHTML        = msg.sps30.PM2 + "&micro;g/m3";
      document.getElementById("PM4").innerHTML        = msg.sps30.PM4 + "&micro;g/m3";
      document.getElementById("PM10").innerHTML       = msg.sps30.PM10 + "&micro;g/m3";
      document.getElementById("NumPM1").innerHTML     = msg.sps30.nPM0 + "#/cm3";
      document.getElementById("NumPM2").innerHTML     = msg.sps30.nPM2 + "#/cm";
      document.getElementById("NumPM4").innerHTML     = msg.sps30.nPM4 + "#/cm";
      document.getElementById("NumPM10").innerHTML    = msg.sps30.nPM10 + "#/cm";
      document.getElementById("PartSize").innerHTML   = msg.sps30.PartSize + "#/cm";
      document.getElementById("PM2aq").innerHTML      = msg.sps30.PM2_airquality;
      document.getElementById("PM10aq").innerHTML     = msg.sps30.PM10_airquality;
    }

    else {
    }
  };
 
  connection.onOpen{
    console.log('Connection opened');
  }

  connection.onClose = function(){
    console.log('Connection closed!');
    //reconnect now
    check();
  };

  connection.onError(e){
    console.log('Error: ', e.data);
  }
  
  function check(){
    if(!connection || connection.readyState == 3){;
  	setInterval(check, 5000);
    }
  };

  </script>
</body>
</html>
